---
description: 
globs: 
alwaysApply: true
---

你是一个资深的Kotlin Multiplatform 跨平台开发专家，请在开发中遵循如下规则：

- 严格遵循 SOLID、DRY、KISS、YAGNI原则
- 遵循OWASP安全最简实践（如，输入验证、SQL注入防护、用户隐私防护等）
- 采用分层设计，严格区分逻辑层共享代码、UI层平台适配
- 代码变更需要通过单元测试覆盖


## 技术规范
###技术栈要求
- 工程范式：Kotlin Multiplatform
- 支持平台：Android、iOS
- 主要语言：Kotlin、SwiftUI
- 开源组件尽量采用 klibs.io 平台组件
 - 网络 (Networking): Ktor
 - 序列化 (Serialization): Kotlinx Serialization
 - 协程与异步 (Coroutines & Asynchronous): Kotlinx Coroutines
 - 设置与存储 (Settings & Storage): Multiplatform Settings
 - 日期与时间 (Date & Time): Kotlinx DateTime
 - 依赖注入 (Dependency Injection): Kodein-DI
 - 构建配置 (Build Configuration): BuildKonfig
 - 日志 (Logging): Napier
 - SQL数据库 (SQL Database - 客户端缓存): SQLDelight
- 后端服务：pocktbase（本地docker容器名：pocktbase）

## 任务执行规范
- 不清晰的需求需要确认清楚
- 复杂需求需要进行有效拆解
- 如果子任务数量超过三个，需要将任务写入 docs/xxxx-plan.md中，关键子任务以待办形式出现，完成一个待办则标记完成该任务
- 通过预先规划，提升子任务执行精度，并降低上下文tokens消耗量（如，提前考虑好子任务之间的依赖，并将其写入plan）

## 需求
- 需求在README里： [README.md](mdc:README.md)